function varargout = Apply_Filter(varargin)
% APPLY_FILTER MATLAB code for Apply_Filter.fig
%      APPLY_FILTER, by itself, creates a new APPLY_FILTER or raises the existing
%      singleton*.
%
%      H = APPLY_FILTER returns the handle to a new APPLY_FILTER or the handle to
%      the existing singleton*.
%
%      APPLY_FILTER('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in APPLY_FILTER.M with the given input arguments.
%
%      APPLY_FILTER('Property','Value',...) creates a new APPLY_FILTER or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before Apply_Filter_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to Apply_Filter_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES
%
% Created by Jerome Lecoq in 2012

% Edit the above text to modify the response to help Apply_Filter

% Last Modified by GUIDE v2.5 26-Feb-2012 13:59:49

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @Apply_Filter_OpeningFcn, ...
                   'gui_OutputFcn',  @Apply_Filter_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before Apply_Filter is made visible.
function Apply_Filter_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to Apply_Filter (see VARARGIN)
global SpikeFilterData;
global SpikeMovieData;

% Choose default command line output for Apply_Filter
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes Apply_Filter wait for user response (see UIRESUME)
% uiwait(handles.figure1);
NumberMovies=length(SpikeMovieData);

if ~isempty(SpikeMovieData)
    for i=1:NumberMovies
        TextMovie{i}=[num2str(i),' - ',SpikeMovieData(i).Label.ListText];
    end
    set(handles.MovieSelector,'String',TextMovie);
end

NumberFilters=length(SpikeFilterData);

if ~isempty(SpikeFilterData)
    for i=1:NumberFilters
        TextFilter{i}=[num2str(i),' - ',SpikeFilterData(i).Label.ListText];
    end
    set(handles.FilterSelector,'String',TextFilter);
end

if (length(varargin)>1)
    Settings=varargin{2};
    set(handles.MovieSelector,'Value',intersect(1:NumberMovies,Settings.MovieSelectorValue));
    set(handles.FilterSelector,'Value',intersect(1:NumberFilters,Settings.FilterSelectorValue));
    set(handles.SelectAllFilters,'Value',Settings.SelectAllFilterValue);
end
    
SelectAllFilters_Callback(hObject, eventdata, handles);

% This function send the current settings to the main interface for saving
% purposes and for the batch mode
function Settings=GetSettings(hObject)
handles=guidata(hObject);
Settings.FilterSelectorValue=get(handles.FilterSelector,'Value');
Settings.SelectAllFilterValue=get(handles.SelectAllFilters,'Value');
Settings.MovieSelectorValue=get(handles.MovieSelector,'Value');


% --- Outputs from this function are returned to the command line.
function varargout = Apply_Filter_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in ValidateValues.
function ValidateValues_Callback(hObject, eventdata, handles)
% hObject    handle to ValidateValues (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
uiresume;


% --- Executes on button press in ApplyApps.
function ApplyApps_Callback(hObject, eventdata, handles)
% hObject    handle to ApplyApps (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SpikeFilterData;
global SpikeMovieData;
global SpikeTraceData;

h=waitbar(0,'Applying filters...');

if (get(handles.SelectAllFilters,'Value')==1)
    FilterSel=1:length(SpikeFilterData);
else
    FilterSel=get(handles.FilterSelector,'Value');
end

MovieSel=get(handles.MovieSelector,'Value');

NumberFilters=length(FilterSel);

dividerWaitbar=10^(floor(log10(NumberFilters))-1);

MovieSize=SpikeMovieData(MovieSel).DataSize;
LocalTrace=length(SpikeTraceData);

ListBadIndex=[];

for i=1:NumberFilters
    FilterSize=SpikeFilterData(FilterSel(i)).DataSize;
    % We check if filter and movies are of the same size
    if (~any(MovieSize(1:2)-FilterSize))
        LocalTrace=LocalTrace+1;
        if isempty(SpikeTraceData)
            InitTraces();
        end
        for j=1:MovieSize(3)
            SpikeTraceData(LocalTrace).TimePoint(j)=sum(sum(double(SpikeFilterData(FilterSel(i)).Filter).*double(SpikeMovieData(MovieSel).TimePixel(:,:,j))*...
                SpikeMovieData(MovieSel).TimePixelUnits))+SpikeMovieData(MovieSel).TimeFrame(j);
            SpikeTraceData(LocalTrace).Trace(j)=sum(sum(double(SpikeFilterData(FilterSel(i)).Filter).*double(SpikeMovieData(MovieSel).Movie(:,:,j))));
        end
        SpikeTraceData(LocalTrace).DataSize=size(SpikeTraceData(LocalTrace).Trace);
        SpikeTraceData(LocalTrace).Label.YLabel=SpikeMovieData(MovieSel).Label.CLabel;
        SpikeTraceData(LocalTrace).Filename=SpikeMovieData(MovieSel).Filename;
        SpikeTraceData(LocalTrace).Path=SpikeMovieData(MovieSel).Path;
        SpikeTraceData(LocalTrace).Label.ListText=SpikeFilterData(FilterSel(i)).Label.ListText;
        SpikeTraceData(LocalTrace).Label.YLabel=SpikeMovieData(MovieSel).Label.CLabel;
    else
        ListBadIndex=[ListBadIndex,FilterSel(i)];
    end
    if (round(i/dividerWaitbar)==i/dividerWaitbar)
        waitbar(i/NumberFilters,h);
    end
end
close(h);

if ~isempty(ListBadIndex)
    msgbox(['Filter ',num2str(ListBadIndex),' ','are not of the same size as the movie']);
end

ValidateValues_Callback(hObject, eventdata, handles);


% --- Executes on selection change in FilterSelector.
function FilterSelector_Callback(hObject, eventdata, handles)
% hObject    handle to FilterSelector (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns FilterSelector contents as cell array
%        contents{get(hObject,'Value')} returns selected item from FilterSelector


% --- Executes during object creation, after setting all properties.
function FilterSelector_CreateFcn(hObject, eventdata, handles)
% hObject    handle to FilterSelector (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes during object creation, after setting all properties.
function ValidateValues_CreateFcn(hObject, eventdata, handles)
% hObject    handle to ValidateValues (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called


% --- Executes on button press in SelectAllFilters.
function SelectAllFilters_Callback(hObject, eventdata, handles)
% hObject    handle to SelectAllFilters (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of SelectAllFilters
if (get(handles.SelectAllFilters,'Value')==1)
    set(handles.FilterSelector,'Enable','off');
else
    set(handles.FilterSelector,'Enable','on');
end


% --- Executes on selection change in MovieSelector.
function MovieSelector_Callback(hObject, eventdata, handles)
% hObject    handle to MovieSelector (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns MovieSelector contents as cell array
%        contents{get(hObject,'Value')} returns selected item from MovieSelector


% --- Executes during object creation, after setting all properties.
function MovieSelector_CreateFcn(hObject, eventdata, handles)
% hObject    handle to MovieSelector (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
