function varargout = Movie_Spectrum(varargin)
% MOVIE_SPECTRUM MATLAB code for Movie_Spectrum.fig
%      MOVIE_SPECTRUM, by itself, creates a new MOVIE_SPECTRUM or raises the existing
%      singleton*.
%
%      H = MOVIE_SPECTRUM returns the handle to a new MOVIE_SPECTRUM or the handle to
%      the existing singleton*.
%
%      MOVIE_SPECTRUM('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in MOVIE_SPECTRUM.M with the given input arguments.
%
%      MOVIE_SPECTRUM('Property','Value',...) creates a new MOVIE_SPECTRUM or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before Movie_Spectrum_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to Movie_Spectrum_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES
%
% Created by Jerome Lecoq in 2011

% Edit the above text to modify the response to help Movie_Spectrum

% Last Modified by GUIDE v2.5 28-Feb-2012 17:24:22

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @Movie_Spectrum_OpeningFcn, ...
                   'gui_OutputFcn',  @Movie_Spectrum_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before Movie_Spectrum is made visible.
function Movie_Spectrum_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to Movie_Spectrum (see VARARGIN)

% Choose default command line output for Movie_Spectrum
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes Movie_Spectrum wait for user response (see UIRESUME)
% uiwait(handles.figure1);
global SpikeMovieData;

if (length(varargin)>1)
    Settings=varargin{2};
    set(handles.MovieSelector,'Value',Settings.MovieSelectorValue);
    set(handles.MovieSelector,'String',Settings.MovieSelectorString);
    set(handles.FrequBegin,'String',Settings.FrequBeginString);
    set(handles.FrequEnd,'String',Settings.FrequEndString);
    set(handles.ExportFilters,'Value',Settings.ExportFiltersValue);
else
    if ~isempty(SpikeMovieData)
        for i=1:length(SpikeMovieData)
            TextMovie{i}=[num2str(i),' - ',SpikeMovieData(i).Label.ListText];
        end
        
        set(handles.MovieSelector,'String',TextMovie);
        set(handles.FrequEnd,'String',num2str(SpikeMovieData(1).DataSize(3)));
    end
end
    

% This function send the current settings to the main interface for saving
% purposes and for the batch mode
function Settings=GetSettings(hObject)
handles=guidata(hObject);
Settings.MovieSelectorValue=get(handles.MovieSelector,'Value');
Settings.MovieSelectorString=get(handles.MovieSelector,'String');
Settings.FrequBeginString=get(handles.FrequBegin,'String');
Settings.FrequEndString=get(handles.FrequEnd,'String');
Settings.ExportFiltersValue=get(handles.ExportFilters,'Value');

% --- Outputs from this function are returned to the command line.
function varargout = Movie_Spectrum_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in ValidateValues.
function ValidateValues_Callback(hObject, eventdata, handles)
% hObject    handle to ValidateValues (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
if isfield(handles,'hFigImageFreq')
    if (ishandle(handles.hFigImageFreq))
        delete(handles.hFigImageFreq);
    end
end

if isfield(handles,'hFigImagePhase')
    if (ishandle(handles.hFigImagePhase))
        delete(handles.hFigImagePhase);
    end
end

uiresume;


% --- Executes on button press in ApplyApps.
function ApplyApps_Callback(hObject, eventdata, handles)
% hObject    handle to ApplyApps (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SpikeMovieData;
global SpikeFilterData;

MovieSel=get(handles.MovieSelector,'Value');

FrequBegin=str2double(get(handles.FrequBegin,'String'));
FrequEnd=str2double(get(handles.FrequEnd,'String'));

h=waitbar(0,'Computing frequency maps...');

dividerWaitbar=10^(floor(log10(SpikeMovieData(MovieSel).DataSize(1)))-1);

% Preallocate matrix
PhaseMap=zeros(SpikeMovieData(MovieSel).DataSize(1:2),'double');
PSDMap=PhaseMap;

% The closest larger power of 2 to get faster FFT
NFFT = SpikeMovieData(MovieSel).DataSize(3);

for i=1:SpikeMovieData(MovieSel).DataSize(1)
    for j=1:SpikeMovieData(MovieSel).DataSize(2)
        LocalTrace=SpikeMovieData(MovieSel).Movie(i,j,:);
        LocalTime=SpikeMovieData(MovieSel).TimeFrame+SpikeMovieData(MovieSel).TimePixelUnits*double(SpikeMovieData(MovieSel).TimePixel(i,j));

        Spectrum=fft(LocalTrace,NFFT);
        FrequencySampl=1/mean(diff(LocalTime));

        FreqAxis=FrequencySampl/NFFT*(1:(floor(NFFT/2)+1));
        
        % We find the indices to keep
        IKeep=find(FreqAxis>FrequBegin & FreqAxis<FrequEnd);
        
        FFTvalues=Spectrum(IKeep);
        
        % We first Calculate Power Sprectral Density
        
        % To get the density
        SD=abs(FFTvalues)/length(LocalTrace);
        
        % To get the power
        PSD=SD.^2;
        
        % we only get one average value
        PSDMap(i,j)=mean(PSD);
        
        % Next we extract the phase curve
        Phase=180/pi*atan(imag(FFTvalues)./real(FFTvalues));
        
        PhaseMap(i,j)=mean(Phase);
        
    end
    if (round(i/dividerWaitbar)==i/dividerWaitbar)
        waitbar(i/SpikeMovieData(MovieSel).DataSize(1),h);
    end
end
close(h);

if isfield(handles,'hFigImageFreq')
    if (isempty(handles.hFigImageFreq) || ~ishandle(handles.hFigImageFreq))
        handles.hFigImageFreq=figure('Name','Power Spectral Density map','NumberTitle','off');
    else
        figure(handles.hFigImageFreq);
    end
else
    handles.hFigImageFreq=figure('Name','Power Spectral Density map','NumberTitle','off');
end
imagesc(PSDMap);

if isfield(handles,'hFigImagePhase')
    if (isempty(handles.hFigImagePhase) || ~ishandle(handles.hFigImagePhase))
        handles.hFigImagePhase=figure('Name','Phase map','NumberTitle','off');
    else
        figure(handles.hFigImagePhase);
    end
else
    handles.hFigImagePhase=figure('Name','Phase map','NumberTitle','off');
end
imagesc(PhaseMap);

if get(handles.ExportFilters,'Value')
    CurrentNumberFilter=length(SpikeFilterData);
    if isempty(SpikeFilterData)
        InitFilters();
    end
    SpikeFilterData(CurrentNumberFilter+1).Filter=PhaseMap;
    SpikeFilterData(CurrentNumberFilter+1).DataSize=size(SpikeFilterData(CurrentNumberFilter+1).Filter);
    SpikeFilterData(CurrentNumberFilter+1).Label.CLabel='Oscillation phase (deg)';
    SpikeFilterData(CurrentNumberFilter+1).Label.XLabel=SpikeMovieData(MovieSel).Label.XLabel;
    SpikeFilterData(CurrentNumberFilter+1).Label.YLabel=SpikeMovieData(MovieSel).Label.YLabel;
    SpikeFilterData(CurrentNumberFilter+1).Label.ZLabel=SpikeMovieData(MovieSel).Label.ZLabel;
    SpikeFilterData(CurrentNumberFilter+1).Label.Xposition=SpikeMovieData(MovieSel).Xposition;
    SpikeFilterData(CurrentNumberFilter+1).Label.Yposition=SpikeMovieData(MovieSel).Yposition;
    SpikeFilterData(CurrentNumberFilter+1).Label.Zposition=SpikeMovieData(MovieSel).Zposition;
    SpikeFilterData(CurrentNumberFilter+1).Filename=SpikeMovieData(MovieSel).Filename;
    SpikeFilterData(CurrentNumberFilter+1).Path=SpikeMovieData(MovieSel).Path;
    SpikeFilterData(CurrentNumberFilter+1).OriginalMovie=MovieSel;
    SpikeFilterData(CurrentNumberFilter+1).Label.ListText='Phase map';
    
        SpikeFilterData(CurrentNumberFilter+2).Filter=PSDMap;
    SpikeFilterData(CurrentNumberFilter+2).DataSize=size(SpikeFilterData(CurrentNumberFilter+2).Filter);
    SpikeFilterData(CurrentNumberFilter+2).Label.CLabel='Oscillation power (W/Hz)';
    SpikeFilterData(CurrentNumberFilter+2).Label.XLabel=SpikeMovieData(MovieSel).Label.XLabel;
    SpikeFilterData(CurrentNumberFilter+2).Label.YLabel=SpikeMovieData(MovieSel).Label.YLabel;
    SpikeFilterData(CurrentNumberFilter+2).Label.ZLabel=SpikeMovieData(MovieSel).Label.ZLabel;
    SpikeFilterData(CurrentNumberFilter+2).Label.Xposition=SpikeMovieData(MovieSel).Xposition;
    SpikeFilterData(CurrentNumberFilter+2).Label.Yposition=SpikeMovieData(MovieSel).Yposition;
    SpikeFilterData(CurrentNumberFilter+2).Label.Zposition=SpikeMovieData(MovieSel).Zposition;
    SpikeFilterData(CurrentNumberFilter+2).Filename=SpikeMovieData(MovieSel).Filename;
    SpikeFilterData(CurrentNumberFilter+2).Path=SpikeMovieData(MovieSel).Path;
    SpikeFilterData(CurrentNumberFilter+2).OriginalMovie=MovieSel;
    SpikeFilterData(CurrentNumberFilter+2).Label.ListText='PSD map';
end
guidata(handles.output, handles);


% --- Executes on selection change in MovieSelector.
function MovieSelector_Callback(hObject, eventdata, handles)
% hObject    handle to MovieSelector (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns MovieSelector contents as cell array
%        contents{get(hObject,'Value')} returns selected item from MovieSelector


% --- Executes during object creation, after setting all properties.
function MovieSelector_CreateFcn(hObject, eventdata, handles)
% hObject    handle to MovieSelector (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function CurrentFrameValue_Callback(hObject, eventdata, handles)
% hObject    handle to CurrentFrameValue (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of CurrentFrameValue as text
%        str2double(get(hObject,'String')) returns contents of CurrentFrameValue as a double

% --- Executes during object creation, after setting all properties.
function CurrentFrameValue_CreateFcn(hObject, eventdata, handles)
% hObject    handle to CurrentFrameValue (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function FrequBegin_Callback(hObject, eventdata, handles)
% hObject    handle to FrequBegin (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of FrequBegin as text
%        str2double(get(hObject,'String')) returns contents of FrequBegin as a double


% --- Executes during object creation, after setting all properties.
function FrequBegin_CreateFcn(hObject, eventdata, handles)
% hObject    handle to FrequBegin (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function FrequEnd_Callback(hObject, eventdata, handles)
% hObject    handle to FrequEnd (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of FrequEnd as text
%        str2double(get(hObject,'String')) returns contents of FrequEnd as a double


% --- Executes during object creation, after setting all properties.
function FrequEnd_CreateFcn(hObject, eventdata, handles)
% hObject    handle to FrequEnd (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in AveragingType.
function AveragingType_Callback(hObject, eventdata, handles)
% hObject    handle to AveragingType (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns AveragingType contents as cell array
%        contents{get(hObject,'Value')} returns selected item from AveragingType


% --- Executes during object creation, after setting all properties.
function AveragingType_CreateFcn(hObject, eventdata, handles)
% hObject    handle to AveragingType (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes during object creation, after setting all properties.
function ValidateValues_CreateFcn(hObject, eventdata, handles)
% hObject    handle to ValidateValues (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called


% --- Executes on button press in ExportFilters.
function ExportFilters_Callback(hObject, eventdata, handles)
% hObject    handle to ExportFilters (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of ExportFilters
