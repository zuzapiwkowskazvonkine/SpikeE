function varargout = Load_Movie_Tif(varargin)
% LOAD_MOVIE_TIF MATLAB code for Load_Movie_Tif.fig
%      LOAD_MOVIE_TIF, by itself, creates a new LOAD_MOVIE_TIF or raises the existing
%      singleton*.
%
%      H = LOAD_MOVIE_TIF returns the handle to a new LOAD_MOVIE_TIF or the handle to
%      the existing singleton*.
%
%      LOAD_MOVIE_TIF('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in LOAD_MOVIE_TIF.M with the given input arguments.
%
%      LOAD_MOVIE_TIF('Property','Value',...) creates a new LOAD_MOVIE_TIF or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before Load_Movie_Tif_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to Load_Movie_Tif_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES
%
% Created by Jerome Lecoq in 2011

% Edit the above text to modify the response to help Load_Movie_Tif

% Last Modified by GUIDE v2.5 06-Feb-2012 22:37:12

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @Load_Movie_Tif_OpeningFcn, ...
                   'gui_OutputFcn',  @Load_Movie_Tif_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before Load_Movie_Tif is made visible.
function Load_Movie_Tif_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to Load_Movie_Tif (see VARARGIN)

% Choose default command line output for Load_Movie_Tif
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes Load_Movie_Tif wait for user response (see UIRESUME)
% uiwait(handles.figure1);

if (length(varargin)>1)
    Settings=varargin{2};
    set(handles.FilenameShow,'String',Settings.FilenameShowString);
    set(handles.NbFrame,'String',Settings.NbFrameString);
    set(handles.StartFrame,'String',Settings.StartFrameString);
    set(handles.EndFrame,'String',Settings.EndFrameString);
    set(handles.SinglePixelSize,'String',Settings.SinglePixelSizeString);
    set(handles.FrameRate,'String',Settings.FrameRateString);
    set(handles.LoadBehSelect,'Value',Settings.LoadBehSelectValue);
end
    

% This function send the current settings to the main interface for saving
% purposes and for the batch mode
function Settings=GetSettings(hObject)
handles=guidata(hObject);
Settings.FilenameShowString=get(handles.FilenameShow,'String');
Settings.NbFrameString=get(handles.NbFrame,'String');
Settings.StartFrameString=get(handles.StartFrame,'String');
Settings.EndFrameString=get(handles.EndFrame,'String');
Settings.SinglePixelSizeString=get(handles.SinglePixelSize,'String');
Settings.FrameRateString=get(handles.FrameRate,'String');
Settings.LoadBehSelectValue=get(handles.LoadBehSelect,'Value');


% --- Outputs from this function are returned to the command line.
function varargout = Load_Movie_Tif_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in ValidateValues.
function ValidateValues_Callback(hObject, eventdata, handles)
% hObject    handle to ValidateValues (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
uiresume;


% --- Executes on button press in ApplyApps.
function ApplyApps_Callback(hObject, eventdata, handles)
% hObject    handle to ApplyApps (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SpikeMovieData;

if (1==get(handles.LoadBehSelect,'Value'))
    InitMovies();
    BeginMovie=1;
else
    BeginMovie=length(SpikeMovieData)+1;
end

[pathstr, name, ext] = fileparts(get(handles.FilenameShow,'String'));

SpikeMovieData(BeginMovie).Path=pathstr;
SpikeMovieData(BeginMovie).Filename=[name ext];

MovieLoader_Tif(BeginMovie,handles);
ValidateValues_Callback(hObject, eventdata, handles);

 
% this function does the big job, ie loading the data from files and
% creating the associated matrix
function MovieLoader_Tif(BeginMovie,handles)
global SpikeMovieData;

h=waitbar(0,'Reading file');

fileInLoading=fullfile(SpikeMovieData(BeginMovie).Path,SpikeMovieData(BeginMovie).Filename);

InfoFile=imfinfo(fileInLoading);

TifLink = Tiff(fileInLoading, 'r');

% Each pixel is on ubit10
% Filesize is in bytes
widthMovie=InfoFile(1).Width;
heightMovie=InfoFile(1).Height;
framerate=str2num(get(handles.FrameRate,'String'));

StartFrame=str2num(get(handles.StartFrame,'String'));
EndFrame=str2num(get(handles.EndFrame,'String'));
% Once you know width and Height, number of frame is straightforward
Numberframe=1+EndFrame-StartFrame;

% We prallocate the movie
SpikeMovieData(BeginMovie).Movie=zeros(heightMovie,widthMovie,Numberframe,'uint16');
SpikeMovieData(BeginMovie).DataSize=size(SpikeMovieData(BeginMovie).Movie);

% We create the various time matrix
SpikeMovieData(BeginMovie).TimeFrame=zeros(1,Numberframe,'single');
SpikeMovieData(BeginMovie).TimePixel=zeros(SpikeMovieData(BeginMovie).DataSize(1:3),'uint8');
SpikeMovieData(BeginMovie).Exposure=1/framerate*ones(SpikeMovieData(BeginMovie).DataSize(1:2),'single');
SpikeMovieData(BeginMovie).TimePixelUnits=10^-6;

% waitbar is consuming too much ressources, so I divide its acces
dividerWaitbar=10^(floor(log10(Numberframe))-1);


LocalData=zeros(widthMovie,heightMovie);

for i=1:Numberframe
    if ((TifLink.currentDirectory())~=(StartFrame+i-1))
        TifLink.setDirectory(StartFrame+i-1);
    end
    SpikeMovieData(BeginMovie).Movie(:,:,i)=TifLink.read();
    
    if (round(i/dividerWaitbar)==i/dividerWaitbar)
        waitbar(i/Numberframe,h);
    end
end

% We close the file in the end
TifLink.close();

for j=BeginMovie:length(SpikeMovieData)
    for i=1:SpikeMovieData(j).DataSize(3)
        SpikeMovieData(j).TimeFrame(i)=1/(2*(framerate))+(i-1)/framerate;
    end
end

% For now, the microscope is not calibrated
RatioPixelSpace=str2num(get(handles.SinglePixelSize,'String'));

% We create the position matrix that store X,Y,Z position of all pixels
for j=BeginMovie:length(SpikeMovieData)
        [SpikeMovieData(j).Xposition(:,:),SpikeMovieData(j).Yposition(:,:)] = meshgrid(RatioPixelSpace*(1:SpikeMovieData(j).DataSize(2)),RatioPixelSpace*(1:SpikeMovieData(j).DataSize(1)));
        SpikeMovieData(j).Zposition(:,:)=zeros(size(SpikeMovieData(j).Xposition(:,:)));
end

SpikeMovieData(BeginMovie).Label.XLabel='\mum';
SpikeMovieData(BeginMovie).Label.YLabel='\mum';
SpikeMovieData(BeginMovie).Label.ZLabel='\mum';
SpikeMovieData(BeginMovie).Label.CLabel='Fluorescence (au)';
SpikeMovieData(BeginMovie).Label.ListText='Tif file';

close(h);

% --- Executes on button press in SelectFile.
function SelectFile_Callback(hObject, eventdata, handles)
% hObject    handle to SelectFile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SpikeMovieData;

% Open file path
[filename, pathname] = uigetfile( ...
    {'*.tif;*.tiff','TIF Files (*.tif, *.tiff)'},'Select TIF File');

% Open file if exist
% If "Cancel" is selected then return
if isequal([filename,pathname],[0,0])
    return
    
    % Otherwise construct the fullfilename and Check and load the file
else 
    % To keep the path accessible to futur request
    cd(pathname);
    set(handles.FilenameShow,'String',fullfile(pathname,filename));
    UpdateFileInfo();
end


function StartFrame_Callback(hObject, eventdata, handles)
% hObject    handle to StartFrame (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of StartFrame as text
%        str2double(get(hObject,'String')) returns contents of StartFrame as a double


% --- Executes during object creation, after setting all properties.
function StartFrame_CreateFcn(hObject, eventdata, handles)
% hObject    handle to StartFrame (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function EndFrame_Callback(hObject, eventdata, handles)
% hObject    handle to EndFrame (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of EndFrame as text
%        str2double(get(hObject,'String')) returns contents of EndFrame as a double
UpdateFileInfo();


% --- Executes during object creation, after setting all properties.
function EndFrame_CreateFcn(hObject, eventdata, handles)
% hObject    handle to EndFrame (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function SinglePixelSize_Callback(hObject, eventdata, handles)
% hObject    handle to SinglePixelSize (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of SinglePixelSize as text
%        str2double(get(hObject,'String')) returns contents of SinglePixelSize as a double


% --- Executes during object creation, after setting all properties.
function SinglePixelSize_CreateFcn(hObject, eventdata, handles)
% hObject    handle to SinglePixelSize (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function FrameRate_Callback(hObject, eventdata, handles)
% hObject    handle to FrameRate (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of FrameRate as text
%        str2double(get(hObject,'String')) returns contents of FrameRate as a double


% --- Executes during object creation, after setting all properties.
function FrameRate_CreateFcn(hObject, eventdata, handles)
% hObject    handle to FrameRate (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% This function update the display based on file information
function UpdateFileInfo()

h=waitbar(0,'Getting number of images in file');
handles=guidata(gcbo);

fileInLoading=get(handles.FilenameShow,'String');

if (exist(fileInLoading)==2)
    TiffAccess=Tiff(fileInLoading,'r');
    while ~(TiffAccess.lastDirectory())
        TiffAccess.nextDirectory();
    end
        
    Numberframe=TiffAccess.currentDirectory();
    TiffAccess.close();
    
    set(handles.NbFrame,'String',num2str(Numberframe));
    
    EndFrame=str2num(get(handles.EndFrame,'String'));
    if isempty(EndFrame)
        set(handles.EndFrame,'String',num2str(Numberframe));
    elseif EndFrame>Numberframe
        set(handles.EndFrame,'String',num2str(Numberframe));
    end
end
close(h);


% --- Executes on selection change in LoadBehSelect.
function LoadBehSelect_Callback(hObject, eventdata, handles)
% hObject    handle to LoadBehSelect (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns LoadBehSelect contents as cell array
%        contents{get(hObject,'Value')} returns selected item from LoadBehSelect


% --- Executes during object creation, after setting all properties.
function LoadBehSelect_CreateFcn(hObject, eventdata, handles)
% hObject    handle to LoadBehSelect (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
